---
- hosts: localhost
  connection: local
  gather_facts: False
  vars:
    vpc_title: 'vpc_new'
    key_pair: "ASGKEY"
    vpc_name: "{{ vpc_title }}"
    igw_name: "{{ vpc_title }} IGW"
    acl_name: "{{ vpc_title }} ACL"
    security_group_name: "{{ vpc_title }} Security Group"
    route_table_name: "{{ vpc_title }} route table"
    vpcCidrBlock: '10.0.0.0/16'
    subnetCidrBlock1: '10.0.1.0/24'
    subnetCidrBlock2: '10.0.2.0/24'
    subnet_name1: "{{ vpc_title }} Subnet-1"
    subnet_name2: "{{ vpc_title }} Subnet-2"
    #port22CidrBlock: '0.0.0.0/0'
    port80CidrBlock: '0.0.0.0/0'
    destinationCidrBlock: '0.0.0.0/0'
    targetGroupName: "targetgroup-alb"
    state: 'present'
    zone1: 'ap-south-1a'
    zone2: 'ap-south-1b'
    region: 'ap-south-1'
    initial_capacity: 3

  tasks:
  - name: Create VPC
    ec2_vpc_net:
      name: "{{ vpc_name }}"
      cidr_block: "{{ vpcCidrBlock }}"
      region: "{{ region }}"
      dns_support: yes
      dns_hostnames: yes
      tenancy: default
      state: "{{ state }}"
    register: ec2_vpc_result

  - name: Create IGW
    ec2_vpc_igw: 
      vpc_id: "{{ ec2_vpc_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}"
      tags:
        Name: "{{ igw_name }}"
    register: igw_result

  - name: Create Subnet-1
    ec2_vpc_subnet:
      vpc_id: "{{ ec2_vpc_result.vpc.id }}"
      region: "{{ region }}"
      az: "{{ zone1 }}"  
      state: "{{ state }}"
      cidr: "{{ subnetCidrBlock1 }}"
      map_public: yes
      resource_tags:
        Name: "{{ subnet_name1 }}"
    register: subnet1_result

  - name: Create Subnet-2
    ec2_vpc_subnet:
      vpc_id: "{{ ec2_vpc_result.vpc.id }}"
      region: "{{ region }}"
      az: "{{ zone2 }}"  
      state: "{{ state }}"
      cidr: "{{ subnetCidrBlock2 }}"
      map_public: yes
      resource_tags:
        Name: "{{ subnet_name2 }}"
    register: subnet2_result

  - name: Create Security Group
    ec2_group:
      name: "{{ security_group_name }}"
      vpc_id: "{{ ec2_vpc_result.vpc.id }}"
      region: "{{ region }}"
      description: "{{ security_group_name }}"
      tags:
        Name: "{{ security_group_name  }}"
      rules:
        - proto: tcp
          ports:
          - 80
          cidr_ip: 0.0.0.0/0
          rule_desc: allow all on port 80
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
          rule_desc: allow all on port 22
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
          rule_desc: allow all on port 443
    register: security_group_results


  - name: Create Network Access Control List
    # create the access control list with ingress and egress ports 
    ec2_vpc_nacl:
      vpc_id: "{{ ec2_vpc_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}"
      name: "{{ acl_name }}"
      subnets: [ "{{ subnet1_result.subnet.id }}","{{ subnet2_result.subnet.id }}" ]
      tags:
        Name: "{{ acl_name }}"
        Description: "{{ acl_name }}"
      # ingress acl rules
      ingress:
        # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
        # allow ingress port 22
        - [100, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22]
        # allow ingress port 80
        - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]
        # allow icmp
        - [300, 'icmp', 'allow', "{{ destinationCidrBlock }}", 0, 8]
        # allow ingress ephemeral ports
        - [400, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]
      # egress acl rules
      egress:
        # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
        # allow egres port 22 
        - [100, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22]
        # allow egres port 80 
        - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]
        # allow egress ephemeral ports
        - [300, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]
    register: acl_results

  - name: Create public subnet Route Table
    # create route table and connect subnet to routes
    ec2_vpc_route_table:
      vpc_id: "{{ ec2_vpc_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}"
      tags:
        Name: "{{ route_table_name }}"
      subnets: [ "{{ subnet1_result.subnet.id }}","{{ subnet2_result.subnet.id }}" ]
      
      # create routes
      routes:
        - dest: "{{ destinationCidrBlock }}" 
          gateway_id: "{{ igw_result.gateway_id }}"
    register: public_route_table

  - name: Create EC2 Instance
    ec2:
      key_name: "{{ key_pair }}"
      instance_type: t2.micro
      image: ami-0e8710d48cc4ea8dd
      region: "{{ region }}"
      group_id: "{{ security_group_results.group_id }}"
      wait: yes
      count: 1
      vpc_subnet_id: "{{ subnet1_result.subnet.id }}"
      assign_public_ip: yes
      user_data: |
               #!/bin/bash
               sudo apt-get update
               sudo apt-get install nginx -y
               sudo apt install mysql-server -y
    register: ec2_instance

  - name: Wait for 4 minute to install nginx and mysql
    pause:
      minutes: 3

  - name: Basic AMI Creation. Wait for few minutes
    ec2_ami:
      instance_id: "{{ ec2_instance.instances[0].id }}"
      wait: yes
      name: ec2_ngingx
      tags:
        Name: EC2_NGINX
    register: ami_ec2


  - name: create launch config
    ec2_lc:
      name: my_launch_configuration
      image_id: "{{ ami_ec2.image_id }}"
      key_name: ASGKEY
      region: "{{ region }}"
      security_groups: "{{ security_group_results.group_id }}"
      instance_type: t2.micro
      assign_public_ip: yes

  - name: Create a target group with a default health check
    elb_target_group:
      name: "{{ targetGroupName }}"
      protocol: http
      port: 80
      vpc_id: "{{ ec2_vpc_result.vpc.id }}"
      state: "{{ state }}"
    register: target_group_result

  - name: Create the ALB only listening over port 80
    elb_application_lb:
      name: my-load-balancer
      state: "{{ state }}"
      wait: False
      region: "{{ region }}"
      subnets: [ "{{ subnet1_result.subnet.id }}","{{ subnet2_result.subnet.id }}" ]
      security_groups: [ "{{ security_group_results.group_id }}" ]
      listeners:
        - Protocol: HTTP 
          Port: 80 
          DefaultActions:
            - Type: forward 
              TargetGroupName: "{{ targetGroupName }}"

  - name: ASG 
    ec2_asg:
      name: special
      target_group_arns: [ "{{ target_group_result.target_group_arn }}" ]
      availability_zones: [ 'ap-south-1a', 'ap-south-1b' ]
      launch_config_name: my_launch_configuration
      min_size: 1
      max_size: 10
      desired_capacity: "{{ initial_capacity }}"
      vpc_zone_identifier: [ "{{ subnet1_result.subnet.id }}","{{ subnet2_result.subnet.id }}" ]
      tags:
        - environment: production
          propagate_at_launch: no